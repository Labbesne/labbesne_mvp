// This file is automatically compiled by Webpack, along with any other files
// present in this directory. You're encouraged to place your actual application logic in
// a relevant structure within app/javascript and only use these pack files to reference
// that code so it'll be compiled.

require("@rails/ujs").start()
require("turbolinks").start()
require("@rails/activestorage").start()
require("@fortawesome/fontawesome-free/js/all")
require("channels")
require("../controllers/index.js")

// Uncomment to copy all static images under ../images to the output folder and reference
// them with the image_pack_tag helper in views (e.g <%%= image_pack_tag 'rails.png' %>)
// or the `imagePath` JavaScript helper below.
//
// const images = require.context('../images', true)
// const imagePath = (name) => images(name, true)


// ----------------------------------------------------
// Note(lewagon): ABOVE IS RAILS DEFAULT CONFIGURATION
// WRITE YOUR OWN JS STARTING FROM HERE ðŸ‘‡
// ----------------------------------------------------

// External imports
import "bootstrap";
const Swing = require("swing");
require("swing");
// Internal imports, e.g:
// import { initSelect2 } from '../components/init_select2';

document.addEventListener('turbolinks:load', () => {
  productSwipe();
  productFilter();
  sidebarToggler();
  dynamic();
  cartToggler();
  disabledLinks();
  lifestyleCollapse();
  profileSwipe();
  populatePage();
});

//-------------- Form Collapse in Lifestyle -------------
var lifestyleCollapse = function(){
  $('#lifestyle_studies').click(function studyChanged(){
        if($('#lifestyle_studies').is(":checked"))
            $(".lifestyle_study_hours").show();
        else
            $(".lifestyle_study_hours").hide();
 });
$('#lifestyle_works').click(function workChanged(){
        if($('#lifestyle_works').is(":checked")){
          $(".lifestyle_job_types").show();
          $(".lifestyle_work_hours").show();}
        else{
          $(".lifestyle_job_types").hide();
          $(".lifestyle_work_hours").hide();}
 });
};
/*




*/
//----------------------- Profile Swipe UI ----------------------
var profileSwipe = function(){
  // Prepare the cards in the stack for iteration.
const cards = [].slice.call(document.querySelectorAll('#swipe-card-stack li'));

// An instance of the Stack is used to attach event listeners.
const stack = Swing.Stack();
var currentCard = "";
cards.forEach((targetElement) => {
  // Add card element to the Stack.
  stack.createCard(targetElement);
});

// Add event listener for when a card is thrown out of the stack.
stack.on('throwout', (event) => {
  // e.target Reference to the element that has been thrown out of the stack.
  // e.throwDirection Direction in which the element has been thrown (Direction.LEFT, Direction.RIGHT).
  event.target.classList.add("hidden");
  console.log('Card has been thrown out of the stack.');
  console.log('Throw direction: ' + (event.throwDirection == Direction.LEFT ? 'left' : 'right'));
  stack.getCard(event.target).destroy()
});

stack.on('dragstart', (event) =>{
  currentCard = event.target;
});
stack.on('dragmove', (event) => {
  // e.target Reference to the element that has been thrown out of the stack.
  // e.throwDirection Direction in which the element has been thrown (Direction.LEFT, Direction.RIGHT).
  console.log(event.target);
  var d = event.throwDirection == Direction.LEFT ? 'left' : 'right'
  console.log('Yo this shit is moving to the ' + d);
  if(d == 'left'){
    event.target.querySelector(".swipe-card-like").classList.add("hidden");
    event.target.querySelector(".swipe-card-dislike").classList.remove("hidden");
    event.target.querySelector(".swipe-card-dislike").style.opacity = event.throwOutConfidence;
  }
  else{
    event.target.querySelector(".swipe-card-like").classList.remove("hidden");
    event.target.querySelector(".swipe-card-like").style.opacity = event.throwOutConfidence;
    event.target.querySelector(".swipe-card-dislike").classList.add("hidden");
  }

});

// Add event listener for when a card is thrown in the stack, including the spring back into place effect.
stack.on('throwin', () => {
  console.log('Card has snapped back to the stack.');
  currentCard.querySelector(".swipe-card-like").classList.add("hidden");
  currentCard.querySelector(".swipe-card-dislike").classList.add("hidden");
});
};
/*




*/
// -------------------- Product Specs Page Form Submissions
var populatePage = function(){
  $('#clothing_type_selector_top').click(function(){
    console.log("click");
    $('.type-top-submit').click();
  });
  $('#clothing_type_selector_pants').click(function(){
    $('.type-pants-submit').click();
  });
  $('#clothing_type_selector_shoes').click(function(){
    $('.type-shoes-submit').click();
  });
  $('#clothing_type_selector_accessory').click(function(){
    $('.type-accessory-submit-submit').click();
  });
  $('.btn-product-specs-save').click(function(){
    $('.fine-submit').click();
  });
};
/*




*/
// ------------------------ Disabled Links on Profile Router
var disabledLinks = function(){
   $('a[disabled=disabled]').click(function(event){
        event.preventDefault(); // Prevent link from following its href
    });
};
/*




*/
//----------------------- Products Swipe UI ----------------------
window.productSwipe = function(){
  $('#loading').addClass("hidden");
  // Prepare the cards in the stack for iteration.
const pcards = [].slice.call(document.querySelectorAll('#products-swipe-card-stack li'));

// An instance of the Stack is used to attach event listeners.
const config = {
  /**
   * Invoked in the event of dragmove.
   * Returns a value between 0 and 1 indicating the completeness of the throw out condition.
   * Ration of the absolute distance from the original card position and element width.
   *
   * @param {number} xOffset Distance from the dragStart.
   * @param {number} yOffset Distance from the dragStart.
   * @param {HTMLElement} element Element.
   * @returns {number}
   */
  throwOutConfidence: (xOffset, yOffset, element) => {
    const xConfidence = Math.min(Math.abs(xOffset) / element.offsetWidth*1.5, 1);
    const yConfidence = Math.min(Math.abs(yOffset) / element.offsetHeight, 1);

    return Math.max(xConfidence, yConfidence);
  },
  minThrowOutDistance: 1500,
  maxThrowOutDistance: 2500
};

const pstack = Swing.Stack(config);

  var pcurrentCard = "";

  pcards.forEach((targetElement) => {
    // Add card element to the Stack.
    pstack.createCard(targetElement);
  });

  pstack.on('dragstart', (e) =>{
    pcurrentCard = e.target;
  });
  pstack.on('dragmove', (e) => {
    // e.target Reference to the element that has been thrown out of the stack.
    // e.throwDirection Direction in which the element has been thrown (Direction.LEFT, Direction.RIGHT).
    var d = e.throwDirection == Direction.LEFT ? 'left' : 'right'
    //console.log('Yo this shit is moving to the ' + d);
    //console.log('Confidence = ' + e.throwOutConfidence)
    var likeIcon = e.target.querySelector(".swipe-card-like");
    var dislikeIcon = e.target.querySelector(".swipe-card-dislike");
    if(d == 'left'){
      likeIcon.classList.add("hidden");
      dislikeIcon.classList.remove("hidden");
      dislikeIcon.style.opacity = e.throwOutConfidence;
    }
    else{
      likeIcon.classList.remove("hidden");
      likeIcon.style.opacity = e.throwOutConfidence;
      dislikeIcon.classList.add("hidden");
    }

  });

  pstack.on('dragend', (e) =>{
    e.target.click();
    console.log(e);
  });

    // Add event listener for when a card is thrown out of the stack.
  pstack.on('throwout', (e) => {
    // e.target Reference to the element that has been thrown out of the stack.
    // e.throwDirection Direction in which the element has been thrown (Direction.LEFT, Direction.RIGHT).
    //e.target.classList.add("hidden");
    if($(e.target).data("queue") == '0'){
      $('#loading').removeClass("hidden");
      $('.dynamic-deck').load($('.next_deck').attr('href'));
    }
    var product_id = $('#products-swipe-card-stack li:last-child').data("productid")
    if(e.throwDirection == Direction.LEFT){
      $.ajax({
        type:'POST',
        url:'/preferenceAdd',
        data: `data[product]=${product_id}&data[action]=0`,
        success:function(){
          //I assume you want to do something on controller action execution success?
          console.log("disliked")
        }
      });
    } else {
      $.ajax({
        type:'POST',
        url:'/preferenceAdd',
        data: `data[product]=${product_id}&data[action]=1`,
        success:function(){
          //I assume you want to do something on controller action execution success?
          console.log("liked")
        }
      });
    }
    //pstack.getCard(e.target).throwIn(0,0);
    //$(e.target).prependTo($('#products-swipe-card-stack'));
    //pstack.getCard(e.target).destroy()
  });

  // Add event listener for when a card is thrown in the stack, including the spring back into place effect.
  pstack.on('throwin', () => {
    pcurrentCard.querySelector(".swipe-card-like").classList.add("hidden");
    pcurrentCard.querySelector(".swipe-card-dislike").classList.add("hidden");
  });
};
/*




*/
//----------------------- Product Filters ----------------------
var productFilter = function(){
  $('#men-toggler').click(function(){
    if($(this).prop('checked')){
      $('li[data-gender="Men"]').removeClass('hidden');
    } else{
      $('li[data-gender="Men"]').addClass('hidden').prependTo($('#products-swipe-card-stack'));;
    };
  });
  $('#women-toggler').click(function(){
    if($(this).prop('checked')){
      $('li[data-gender="Women"]').removeClass('hidden');
    } else{
      $('li[data-gender="Women"]').addClass('hidden').prependTo($('#products-swipe-card-stack'));;
    };
  });
  $('#top-toggler').click(function(){
    genderChecker('top', $(this).prop('checked'));
  });
  $('#pants-toggler').click(function(){
    genderChecker('pants', $(this).prop('checked'));
  });
  $('#shoes-toggler').click(function(){
    genderChecker('shoes', $(this).prop('checked'));
  });
  $('.gender-router-men-image').click(function(){
    if($('#women-toggler').prop('checked')){
      $('#women-toggler').click();
    }
    if(!$('#men-toggler').prop('checked')){
      $('#men-toggler').click();
    }
    $('html, body').animate({
     scrollTop: $("#products-section").offset().top
    }, 20);
    $('#gender-section').hide();
  });
  $('.gender-router-women-image').click(function(){
    if($('#men-toggler').prop('checked')){
      $('#men-toggler').click();
    }
    if(!$('#women-toggler').prop('checked')){
      $('#women-toggler').click();
    }
    $('html, body').animate({
     scrollTop: $("#products-section").offset().top
    }, 20);
    $('#gender-section').hide();
  });
};

var genderChecker = function(type, checked){
  if(checked){
      if($('#men-toggler').prop('checked')){
        $('li[data-type=' + type + ']').filter('[data-gender="Men"]').show()
      }
      if($('#women-toggler').prop('checked')){
        $('li[data-type=' + type + ']').filter('[data-gender="Women"]').show()
      }
  } else {
    $('li[data-type=' + type + ']').hide();
    $('li[data-type=' + type + ']').prependTo($('#out_deck'));
  }
};
/*




*/
//----------------------- Sidebar Toggler ----------------------
var sidebarToggler = function(){
  $('.products-container-sidebar-toggler').click(function(){
    $('.products-container-sidebar').toggleClass('sidebar-active')
    $('.products-container-sidebar-toggler').toggleClass('toggler-active')
  });
  $('.products-section-swiper').click(function(){
    if($('.products-container-sidebar').hasClass("sidebar-active")){
      $('.products-container-sidebar').toggleClass('sidebar-active')
      $('.products-container-sidebar-toggler').toggleClass('toggler-active')
    }
  });
}

var cartToggler = function(){
  $('.products-container-cart-toggler').click(function(){
    $('.products-container-cart').toggleClass('cart-active')
    $('.products-container-cart-toggler').toggleClass('toggler-active')
  });
  $('.products-section-swiper').click(function(){
    if($('.products-container-cart').hasClass("cart-active")){
      $('.products-container-cart').toggleClass('cart-active')
      $('.products-container-cart-toggler').toggleClass('toggler-active')
    }
  });
}
var dynamic = function(){
  // Load Products Dynamically when last card swiped
  $(document).on('ajax:success','.next_deck', {} ,function(e){
    $('.dynamic-deck').load($('.next_deck').attr('href'));
  });
  // Dynamic Add to Cart Button
  $('#edit_order_10').bind('ajax:success', function(e){
    $('.dynamic_cart').load('/current_cart');
  });
  // Removing Items from Cart dynamically
  $(document).on('ajax:success','.empty_cart', {} ,function(e){
    $('.dynamic_cart').load('/current_cart');
  });
  $(document).on('ajax:success','.remove_item', {} ,function(e){
    $('.dynamic_cart').load('/current_cart');
  });

  $('#styling_outfits_tab').click(function(){
    $('.stylist-container-body').load('/stylist/outfits');
    $('.styling_tab').removeClass("stylist-tab-active");
    $('#styling_outfits_tab').addClass("stylist-tab-active");
  });
  $(document).on('ajax:success','.page-link', {} ,function(e){
    var req = $(this).attr('href') + `&filter=${$('.filter-active').data('type')}`
    $('.outfit-generator-container-products').load(req);
  });
  $(document).on('click','.stylist-filter', {} ,function(e){
    $('.stylist-filter').removeClass('filter-active');
    $(this).addClass('filter-active');
  });
}

import "controllers"
